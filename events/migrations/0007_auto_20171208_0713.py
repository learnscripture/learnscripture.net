# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-12-08 07:13
from __future__ import unicode_literals

from django.db import migrations


def forwards(apps, schema_editor):
    Event = apps.get_model('events.Event')
    Award = apps.get_model('awards.Award')
    VerseSet = apps.get_model('bibleverses.VerseSet')
    TextVersion = apps.get_model('bibleverses.TextVersion')
    Group = apps.get_model('groups.Group')
    Comment = apps.get_model('comments.Comment')
    # Fix up various issues with Event.

    # Deleted groups:
    for e in Event.objects.filter(message_html__contains='GLPC'):
        if e.event_data['group_id'] == 25:
            e.delete()

    Event.objects.filter(event_type__in=['NEW_COMMENT', 'GROUP_CREATED', 'GROUP_JOINED'],
                         message_html__contains='0-hour-the-time-is-at-hand').delete()
    # Deleted awards (incorrect)
    Event.objects.filter(id__in=[14428, 14520]).delete()

    # Fix up all event types to include data we need to generate message_html
    # dynamically
    for e in Event.objects.filter(event_type__in=['AWARD_RECEIVED', 'AWARD_LOST']):
        print(e.id)
        try:
            award = Award.objects.get(id=e.event_data['award_id'])
        except Award.DoesNotExist:
            award = None
        if award is None:
            assert 'reigning weekly champion' in e.message_html.lower()
            e.event_data['award_type'] = 'REIGNING_WEEKLY_CHAMPION'
            e.event_data['award_level'] = 1
            e.event_data['temporary_award'] = True
        else:
            e.event_data['award_type'] = award.award_type
            e.event_data['award_level'] = award.level
            e.event_data['temporary_award'] = award.award_type in ['REIGNING_WEEKLY_CHAMPION']
        e.save()

    for e in Event.objects.filter(event_type__in=['VERSE_SET_CREATED', 'STARTED_LEARNING_VERSE_SET']):
        print(e.id)
        vs = VerseSet.objects.get(id=e.event_data['verse_set_id'])
        e.event_data['verse_set_slug'] = vs.slug
        e.event_data['verse_set_name'] = vs.name
        e.save()

    for e in Event.objects.filter(event_type__in=['GROUP_CREATED', 'GROUP_JOINED']):
        print(e.id)
        group = Group.objects.get(id=e.event_data['group_id'])
        e.event_data['group_name'] = group.name
        e.event_data['group_slug'] = group.slug
        e.save()

    for e in Event.objects.filter(event_type='STARTED_LEARNING_CATECHISM'):
        print(e.id)
        catechism = TextVersion.objects.get(id=e.event_data['catechism_id'])
        e.event_data['catechism_name'] = catechism.full_name
        e.event_data['catechism_slug'] = catechism.slug
        e.save()

    for e in Event.objects.filter(event_type='NEW_COMMENT'):
        print(e.id)
        comment = Comment.objects.get(id=e.event_data['comment_id'])
        if comment.group_id is not None:
            e.event_data['group_id'] = comment.group_id
            e.event_data['group_slug'] = comment.group.slug
            e.event_data['group_name'] = comment.group.name
        if comment.event_id is not None:
            e.event_data['parent_event_id'] = comment.event.id
            e.event_data['parent_event_account_id'] = comment.event.account.id
            e.event_data['parent_event_account_username'] = comment.event.account.username
        e.save()


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0006_auto_20171208_0420'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards)
    ]
